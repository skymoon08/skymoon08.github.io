{"meta":{"title":"zhangsunny","subtitle":null,"description":"个人技术博客","author":"zhangsunny","url":"https://skymoon08.github.io"},"pages":[{"title":"","date":"2018-03-18T08:14:07.548Z","updated":"2018-03-18T08:14:07.548Z","comments":true,"path":"baidu_verify_dEHGHQpAVN.html","permalink":"https://skymoon08.github.io/baidu_verify_dEHGHQpAVN.html","excerpt":"","text":"dEHGHQpAVN"},{"title":"","date":"2018-03-18T08:20:08.048Z","updated":"2018-03-18T08:19:51.482Z","comments":true,"path":"google95784a9a78d968a0.html","permalink":"https://skymoon08.github.io/google95784a9a78d968a0.html","excerpt":"","text":"google-site-verification: google95784a9a78d968a0.html"},{"title":"个人介绍","date":"2015-03-11T04:22:08.000Z","updated":"2018-03-18T07:53:33.492Z","comments":false,"path":"about/index.html","permalink":"https://skymoon08.github.io/about/index.html","excerpt":"","text":""},{"title":"分类","date":"2018-03-10T16:09:30.000Z","updated":"2018-03-18T07:50:40.688Z","comments":false,"path":"categories/index.html","permalink":"https://skymoon08.github.io/categories/index.html","excerpt":"","text":""},{"title":"copyright","date":"2018-03-18T05:29:35.000Z","updated":"2018-03-18T05:29:58.930Z","comments":true,"path":"copyright/index.html","permalink":"https://skymoon08.github.io/copyright/index.html","excerpt":"","text":""},{"title":"小记","date":"2018-03-11T08:30:12.000Z","updated":"2018-03-18T07:51:20.559Z","comments":false,"path":"notes/index.html","permalink":"https://skymoon08.github.io/notes/index.html","excerpt":"","text":""},{"title":"标签","date":"2018-03-11T04:13:18.000Z","updated":"2018-03-18T07:52:25.937Z","comments":false,"path":"tags/index.html","permalink":"https://skymoon08.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Java并发","slug":"Java并发","date":"2018-05-16T13:57:23.000Z","updated":"2018-05-16T15:10:22.132Z","comments":true,"path":"2018/05/16/Java并发/","link":"","permalink":"https://skymoon08.github.io/2018/05/16/Java并发/","excerpt":"Zookeeper Zookeeper总览（翻译自Zookeeper官方网站Release 3.4.11版本 Zookeeper教程(三):ZooKeeper源码阅读之Worker机制及集群状态监控 Java 并发编程 —– AQS（抽象队列同步器 Java基础之反射（非常重要 一起来谈谈 Spring AOP！ cglib代理的使用 JDK10都发布了，nio你了解多少？ Java线程池之ThreadPoolExecutor Spring事务机制详解 浅析Java并发编程（三）线程的状态&amp;协作 Java 多线程（八） 线程状态图 啃碎并发（一）：Java线程总述与概念 深入分析Spring 与 Spring MVC容器 【RPC 专栏】深入理解RPC之序列化篇–总结篇","text":"Zookeeper Zookeeper总览（翻译自Zookeeper官方网站Release 3.4.11版本 Zookeeper教程(三):ZooKeeper源码阅读之Worker机制及集群状态监控 Java 并发编程 —– AQS（抽象队列同步器 Java基础之反射（非常重要 一起来谈谈 Spring AOP！ cglib代理的使用 JDK10都发布了，nio你了解多少？ Java线程池之ThreadPoolExecutor Spring事务机制详解 浅析Java并发编程（三）线程的状态&amp;协作 Java 多线程（八） 线程状态图 啃碎并发（一）：Java线程总述与概念 深入分析Spring 与 Spring MVC容器 【RPC 专栏】深入理解RPC之序列化篇–总结篇 十分钟搞懂Lombok使用与原理 掘金翻译计划 Java动态代理 《后端架构师技术图谱》 后端架构师技术图谱 FutureTask基本操作总结 MySQL命令，一篇文章替你全部搞定 彻底理解synchronized git基本操作，一篇文章就够了！ JDK10都发布了，nio你了解多少？ 图解CMS垃圾回收机制，你值得拥有 Java3y Java集合总结【面试题+脑图】，将知识点一网打尽！ 深入浅出 Java 微服务视频 【RPC 专栏】深入理解RPC之序列化篇–总结篇 自己用 Netty 实现一个简单的 RPC 并发编程之 Java 三把锁 单点登录与权限管理本质：session和cookie介绍 深入浅出MyBatis：MyBatis解析和运行原理 Netty 源码分析之 零 磨刀不误砍柴工 源码分析环境搭建 NettyServer与SpringBoot集成 源码之下无秘密─做最好的 Netty 源码分析教程 Java 进阶资源汇总 30 分钟 Python 爬虫教程 Netty事件监听和处理（下）【有福利】 Netty事件监听和处理（上）【有福利】 老司机的神兵利器-效率工具 一起来谈谈 Spring AOP！","categories":[],"tags":[]},{"title":"博客简介","slug":"firstblog","date":"2018-03-11T14:14:07.000Z","updated":"2018-03-18T05:30:28.478Z","comments":false,"path":"2018/03/11/firstblog/","link":"","permalink":"https://skymoon08.github.io/2018/03/11/firstblog/","excerpt":"","text":"ZhangSunny的First Blog个人博客简介 作为一枚计科专业的码农，2014年开始从事后端应用开发至今，将日常工作中遇到的问题、个人知识积累、个人见解和“打怪升级”晋级的经验分享于自己的博客，欢迎广大技术蜀黍来此博客分享自己的“故事”。","categories":[{"name":"简言","slug":"简言","permalink":"https://skymoon08.github.io/categories/简言/"}],"tags":[{"name":"个人","slug":"个人","permalink":"https://skymoon08.github.io/tags/个人/"}]},{"title":"Java多线程 Chapter 1","slug":"Pro","date":"2018-03-11T11:33:55.000Z","updated":"2018-03-18T08:55:41.453Z","comments":true,"path":"2018/03/11/Pro/","link":"","permalink":"https://skymoon08.github.io/2018/03/11/Pro/","excerpt":"","text":"线程和进程定义进程： 是操作系统结构的基础，是一次程序的执行，是一个程序及其数据在处理机上顺序执行时发生的活动，是程序在一个数据集合运行的过程，是系统进行资源分配和调度的一个独立单位。 线程：是在进程中独立运行的子任务。 使用多线程就是在使用异步 Java多线程编程主要两种编程方式： 继承Thread类： 不支持多继承，继承Thread，并重写run方法： 12345678 package thread; public class Mytread extends Thread &#123; @Override public void run()&#123; super.run(); System.out.println(\"========= Mytread ========\"); &#125;&#125; 运行类代码 12345678package thread;public class ThreadRunDemo &#123; public static void main(String[] args) &#123; Mytread mytread = new Mytread(); mytread.start(); System.out.println(\"====END!==\"); &#125;&#125; 注： Thread 的start()方法使线程处于就绪状态，run()方法使得线程得到运行，是同步，调用thread.run()就不是异步执行，而是由主线程来调用run()方法。 实现Runnable接口：","categories":[{"name":"Java Multi-thread Pro","slug":"Java-Multi-thread-Pro","permalink":"https://skymoon08.github.io/categories/Java-Multi-thread-Pro/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://skymoon08.github.io/tags/Java/"},{"name":"多线程","slug":"多线程","permalink":"https://skymoon08.github.io/tags/多线程/"}]}]}